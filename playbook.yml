# Configure an EdgeOS router connected on one side to
# the internet and on the other to a private network.
# all Kubernetes targets should be in the network.
# - hosts: routers
#   gather_facts: false
#   roles:
#     - edgeos

# Gather MAC addresses of targets collected by inventory
# in order to configure PXE booting of targets.
- hosts: all
  gather_facts: no
  tasks:
    # used to configure PXE booting
    - name: Fetch the MAC without a requirement on Python
      raw: ifconfig | grep -A2 192.168.2 | tail -n1 | awk '{ print $2 }'
      changed_when: false
      ignore_errors: yes
      register: mac
    - name: Save MAC and IP address in variable
      ignore_errors: yes
      set_fact:
        mac: "{{ mac.stdout | trim }}"
        ip_address: "192.168.2.{{ groups['container_linux'].index(inventory_hostname) | int + 101 }}"

# Set up a PXE server
# so that by restarting computers in the network,
# we can reinstall operating systems.
#
# Set up an NFS server
# so that persistent volumes remain between
# resets of the nodes in the cluster
#
# Set up Postgresql DB
# so that the kubernetes state can
# remain between resets of nodes in the cluster
- hosts: localhost
  become: yes
  vars:
    postgresql_hba_entries:
      - type: host
        database: all
        user: all
        address: '192.168.2.0/24'
        auth_method: md5
    postgresql_global_config_options:
      - option: listen_addresses
        value: '0.0.0.0'
    postgresql_service_state: started
    postgresql_service_enabled: true
    postgresql_databases:
      - name: k3s_db
    postgresql_users:
      - name: k3s
        password: "{{ lookup('password', '~/.kube/k3s_postgresql_password length=64 chars=digits,ascii_letters') }}"
    nfs_exports:
      - "/data/nfs/read-only *(ro,sync,no_root_squash)"
      - "/data/nfs/read-only/movies *(ro,sync,no_root_squash)"
      - "/data/nfs/read-only/music *(ro,sync,no_root_squash)"
      - "/data/nfs/read-write *(rw,sync,no_root_squash)"
  roles:
    - geerlingguy.nfs
    # - geerlingguy.postgresql
    - pxe-server

# Targets should have their NIC first in their
# boot order.
- name: Reset nodes
  hosts: container_linux
  gather_facts: no
  roles:
    - container-linux-reboot
    - container-linux-setup-for-k3s

# Deploy the first master
- name: k3s server
  hosts: container_linux[0]
  gather_facts: no
  tasks:
    - name: Deploy first master
      docker_container:
        name: k3s-server
        env:
          K3S_DATASTORE_ENDPOINT: "postgres://k3s:{{ lookup('password', '~/.kube/k3s_postgresql_password length=64 chars=digits,ascii_letters') }}@192.168.2.100:5432/k3s_db"
          K3S_TOKEN: "{{ lookup('password', '~/.kube/k3s_token length=64 chars=digits,ascii_letters') }}"
        mounts: "{{ mounts }}"
        devices: "{{ devices }}"
        privileged: yes
        pull: no
        image: k3s
        network_mode: host
        command: "server --with-node-id {{ inventory_hostname }}"
        # restart_policy: always

    - name: Get the kubeconfig
      command: |
        docker exec -it k3s-server cat /etc/rancher/k3s/k3s.yaml
      retries: 15
      delay: 2
      changed_when: no
      register: kubeconfig
      until: kubeconfig.rc == 0

    - name: Write the kubeconfig to the localhost
      become: yes
      copy:
        content: "{{ kubeconfig.stdout }}"
        dest: /tmp/kubeconfig
      delegate_to: localhost

    - name: Overwrite the IP address in the Kubeconfig file
      become: yes
      lineinfile:
        dest: /tmp/kubeconfig
        regexp: '^\s*server.*'
        line: "    server: https://{{ hostvars[groups['container_linux'][0]]['ansible_host'] }}:6443"
        state: present
      delegate_to: localhost



- name: k3s masters
  hosts: container_linux[1:3]
  gather_facts: no
  tasks:
    - name: Join remaining masters
      docker_container:
        name: k3s-server
        env:
          K3S_DATASTORE_ENDPOINT: "postgres://k3s:{{ lookup('password', '~/.kube/k3s_postgresql_password length=64 chars=digits,ascii_letters') }}@192.168.2.100:5432/k3s_db"
          K3S_TOKEN: "{{ lookup('password', '~/.kube/k3s_token length=64 chars=digits,ascii_letters') }}"
          K3S_URL: "https://{{ hostvars[groups['container_linux'][0]]['ansible_host'] }}:6443"
        mounts: "{{ mounts }}"
        devices: "{{ devices }}"
        privileged: yes
        image: k3s
        pull: no
        network_mode: host
        command: "server --with-node-id {{ inventory_hostname }}"
        # restart_policy: always

- name: k3s agents
  hosts: container_linux[3:]
  gather_facts: no
  tasks:
    - name: Join k3s agents
      docker_container:
        name: k3s-server
        env:
          K3S_TOKEN: "{{ lookup('password', '~/.kube/k3s_token length=64 chars=digits,ascii_letters') }}"
          K3S_URL: "https://{{ hostvars[groups['container_linux'][0]]['ansible_host'] }}:6443"
        mounts: "{{ mounts }}"
        devices: "{{ devices }}"
        privileged: yes
        image: k3s
        pull: no
        network_mode: host
        command: "agent --with-node-id {{ inventory_hostname }}"
        # restart_policy: always
